<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ตารางข้อมูล (ลบแถวได้)</title>
    <style>
        body { font-family: sans-serif; }
        table { border-collapse: collapse; width: 100%; font-size: 0.8em; }
        th, td { border: 1px solid #dddddd; text-align: left; padding: 4px; }
        th { background-color: #f2f2f2; white-space: nowrap; }
        tr:nth-child(even) { background-color: #f9f9f9; }
        select, input[type="text"], input[type="number"], input[type="date"] { width: 98%; padding: 4px; box-sizing: border-box; font-size: 1em; }
        .vat-amount-display { font-weight: bold; }
        button { padding: 8px 15px; margin: 10px 5px 10px 0; cursor: pointer; color: white; border: none; border-radius: 4px; }
        button#addRowBtn { background-color: #4CAF50; }
        button#addRowBtn:hover { background-color: #45a049; }
        button#exportCsvBtn { background-color: #007bff; }
        button#exportCsvBtn:hover { background-color: #0056b3; }
        button.delete-row-btn { /* สไตล์สำหรับปุ่มลบ */
            background-color: #f44336; /* สีแดง */
            padding: 4px 8px;
            font-size: 0.9em;
            margin: 0; /* ไม่มี margin เพิ่มเติมสำหรับปุ่มในเซลล์ */
        }
        button.delete-row-btn:hover {
            background-color: #d32f2f;
        }
    </style>
</head>
<body>

<h2>ตารางบันทึกข้อมูล (ลบแถวได้)</h2>

<button id="addRowBtn">เพิ่มแถวใหม่</button>
<button id="exportCsvBtn">ส่งออกเป็น CSV (Excel)</button>

<table id="dataTable">
    <thead>
        <tr>
            <th>ลำดับที่</th>
            <th>คำนำหน้า</th>
            <th>ชื่อกิจการ (หลัก)</th>
            <th>รหัสผู้เสียภาษีอากร</th>
            <th>ชื่อสถานประกอบการ/อาคาร</th>
            <th>เลขที่/หมู่ที่</th>
            <th>ตรอก/ซอย</th>
            <th>ถนน</th>
            <th>ตำบล/แขวง</th>
            <th>อำเภอ/เขต</th>
            <th>จังหวัด</th>
            <th>รหัสไปรษณีย์</th>
            <th>วัน/เดือน/ปี</th>
            <th>ประเภทเงินได้</th>
            <th>อัตราภาษี (%)</th>
            <th>มูลค่าสินค้า/บริการ</th>
            <th>ภาษีมูลค่าเพิ่ม</th>
            <th>เงื่อนไขการหักภาษี</th>
            <th>หมายเหตุ</th>
            <th>ลบ</th> {/* หัวคอลัมน์ใหม่สำหรับปุ่มลบ */}
        </tr>
    </thead>
    <tbody>
        <tr>
            <td class="row-number">1</td>
            <td>
                <select class="prefix-select">
                    <option value="">-- คำนำหน้า --</option>
                    <option value="บริษัท">บริษัท</option>
                    <option value="หจก.">หจก.</option>
                </select>
            </td>
            <td><input type="text" class="main-name-input" list="main-name-suggestions" placeholder="พิมพ์/เลือกชื่อกิจการหลัก"></td>
            <td><input type="text" class="tax-id-input" placeholder="กรอกเลขผู้เสียภาษี"></td>
            <td class="establishment-name-display"></td>
            <td class="address-number-moo-display"></td>
            <td class="soi-display"></td>
            <td class="road-display"></td>
            <td class="subdistrict-display"></td>
            <td class="district-display"></td>
            <td class="province-display"></td>
            <td class="postal-code-display"></td>
            <td><input type="date" class="date-input"></td>
            <td><input type="text" class="income-type-input" placeholder="เช่น ค่าบริการ"></td>
            <td>
                <select class="tax-rate-select">
                    <option value="0">0</option><option value="1">1</option><option value="3" selected>3</option><option value="5">5</option><option value="7">7</option><option value="10">10</option>
                </select>
            </td>
            <td><input type="number" class="value-input" placeholder="0.00" step="0.01"></td>
            <td class="vat-amount-display">0.00</td>
            <td><input type="text" class="withholding-condition-input" value="1"></td>
            <td><input type="text" class="notes-input"></td>
            <td><button type="button" class="delete-row-btn">ลบ</button></td> {/* ปุ่มลบในแต่ละแถว */}
        </tr>
        </tbody>
</table>

<datalist id="main-name-suggestions">
    </datalist>

<script>
    const companyDataStore = [
        { prefix: "บริษัท", mainName: "รักษาความปลอดภัย สยามการ์ด แอนด์ คลีนนิ่ง จำกัด", taxId: "0603562007770", establishmentName: "-", number: "2", soi: "ฉลองกรุง 14", road: "ฉลองกรุง", moo: "", subdistrict: "ลำปลาทิว", district: "ลาดกระบัง", province: "กรุงเทพฯ", postalCode: "10520" },
        { prefix: "หจก.", mainName: "พรอสเพอร์ เอ็นจิเนียริ่ง (สาขาบางนา)", taxId: "0105532012207", establishmentName: "อาคารบางนาทาวเวอร์ ตึกบี ชั้น 15", number: "999/64", soi: "", road: "บางนา-ตราด", moo: "1", subdistrict: "บางแก้ว", district: "บางพลี", province: "สมุทรปราการ", postalCode: "10540" },
        { prefix: "บริษัท", mainName: "พรอสเพอร์ เอ็นจิเนียริ่ง จำกัด (มหาชน) - สาขาพัฒนาการ", taxId: "0105532012207", establishmentName: "สำนักงานพัฒนาการ", number: "17", soi: "พัฒนาการ 69", road: "พัฒนาการ", moo: "", subdistrict: "ประเวศ", district: "ประเวศ", province: "กรุงเทพฯ", postalCode: "10250" },
        { prefix: "บริษัท", mainName: "ไทยยูเนี่ยน กรุ๊ป จำกัด (มหาชน)", taxId: "0107537000877", establishmentName: "อาคารเอสเอ็มทาวเวอร์", number: "979/12", soi: "", road: "พหลโยธิน", moo: "", subdistrict: "สามเสนใน", district: "พญาไท", province: "กรุงเทพฯ", postalCode: "10400" }
    ];

    function getCurrentDateString() {
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    function populateMainNameDatalist() {
        const datalist = document.getElementById('main-name-suggestions');
        if (!datalist) return;
        datalist.innerHTML = ''; 
        const uniqueMainNames = new Set();
        companyDataStore.forEach(company => {
            if (company.mainName && company.mainName.trim() !== '') {
                uniqueMainNames.add(company.mainName.trim());
            }
        });
        uniqueMainNames.forEach(name => {
            const option = document.createElement('option');
            option.value = name;
            datalist.appendChild(option);
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        initializeExistingRows();
        populateMainNameDatalist(); 

        const dataTable = document.getElementById('dataTable');
        dataTable.addEventListener('change', function(event) { // Listener สำหรับ input changes (lookup, tax calc)
            const target = event.target;
            const currentRow = target.closest('tr');
            if (!currentRow) return;

            if (target.classList.contains('prefix-select') ||
                target.classList.contains('main-name-input') ||
                target.classList.contains('tax-id-input')) {
                attemptCompanyLookup(currentRow);
            } else if (target.classList.contains('value-input') || target.classList.contains('tax-rate-select')) {
                updateTax(currentRow);
            }
        });

        dataTable.addEventListener('input', function(event){ // Listener สำหรับ value input (tax calc)
            const target = event.target;
            const currentRow = target.closest('tr');
            if (!currentRow) return;
            if (target.classList.contains('value-input')) { updateTax(currentRow); } 
        });
        
        // *** Event Listener สำหรับการคลิกปุ่มลบแถว ***
        dataTable.addEventListener('click', function(event) {
            const target = event.target;
            if (target.classList.contains('delete-row-btn')) {
                const rowToDelete = target.closest('tr');
                if (rowToDelete) {
                    // อาจจะเพิ่มคำยืนยันก่อนลบ
                    // if (confirm("คุณแน่ใจหรือไม่ว่าต้องการลบแถวนี้?")) {
                        rowToDelete.remove();
                        updateRowNumbers(); // เรียกฟังก์ชันอัปเดตลำดับที่
                    // }
                }
            }
        });

        document.getElementById('addRowBtn').addEventListener('click', addNewRow);
        document.getElementById('exportCsvBtn').addEventListener('click', function() {
            exportTableToCSV('ข้อมูลตาราง ' + getCurrentDateString() + '.csv');
        });
    });
    
    function initializeExistingRows() {
        const tableBody = document.getElementById('dataTable').querySelector('tbody');
        const currentDate = getCurrentDateString();
        tableBody.querySelectorAll('tr').forEach((row, index) => {
            const rowNumberCell = row.querySelector('.row-number') || row.cells[0]; // เผื่อ class หาย
            if(rowNumberCell) rowNumberCell.textContent = index + 1;
            
            const withholdingInput = row.querySelector('.withholding-condition-input');
            if (withholdingInput && withholdingInput.value === "") { withholdingInput.value = '1'; }
            const dateInput = row.querySelector('.date-input');
            if (dateInput && !dateInput.value) { dateInput.value = currentDate; }
        });
    }

    // *** ฟังก์ชันใหม่สำหรับอัปเดตลำดับที่ของแถว ***
    function updateRowNumbers() {
        const tableBody = document.getElementById('dataTable').querySelector('tbody');
        const rows = tableBody.querySelectorAll('tr');
        rows.forEach((row, index) => {
            const rowNumberCell = row.querySelector('.row-number') || row.cells[0];
            if (rowNumberCell) {
                rowNumberCell.textContent = index + 1;
            }
        });
    }

    function clearCompanyDetailsFields(row) {
        // ... (เหมือนเดิม) ...
        row.querySelector('.establishment-name-display').textContent = '';
        row.querySelector('.address-number-moo-display').textContent = '';
        row.querySelector('.soi-display').textContent = '';
        row.querySelector('.road-display').textContent = '';
        row.querySelector('.subdistrict-display').textContent = '';
        row.querySelector('.district-display').textContent = '';
        row.querySelector('.province-display').textContent = '';
        row.querySelector('.postal-code-display').textContent = '';
    }

    function clearAllCompanyDerivedFields(row) {
        // ... (เหมือนเดิม) ...
        row.querySelector('.prefix-select').value = '';
        row.querySelector('.main-name-input').value = '';
        row.querySelector('.tax-id-input').value = ''; 
        clearCompanyDetailsFields(row);
    }
    
    function populateAllFieldsFromCompany(row, company) {
        // ... (เหมือนเดิม) ...
        row.querySelector('.prefix-select').value = company.prefix;
        row.querySelector('.main-name-input').value = company.mainName;
        row.querySelector('.tax-id-input').value = company.taxId; 
        row.querySelector('.establishment-name-display').textContent = company.establishmentName || '';
        let numberMooText = '';
        if (company.number && company.number.trim() !== '') { numberMooText += company.number.trim(); }
        if (company.moo && company.moo.trim() !== '') { numberMooText += (numberMooText ? ' ' : '') + 'หมู่ ' + company.moo.trim(); }
        row.querySelector('.address-number-moo-display').textContent = numberMooText;
        row.querySelector('.soi-display').textContent = company.soi || '';
        row.querySelector('.road-display').textContent = company.road || '';
        row.querySelector('.subdistrict-display').textContent = company.subdistrict || '';
        row.querySelector('.district-display').textContent = company.district || '';
        row.querySelector('.province-display').textContent = company.province || '';
        row.querySelector('.postal-code-display').textContent = company.postalCode || '';
    }

    function attemptCompanyLookup(row) {
        // ... (เหมือนเดิม) ...
        const prefixInput = row.querySelector('.prefix-select');
        const mainNameInput = row.querySelector('.main-name-input');
        const taxIdInput = row.querySelector('.tax-id-input');
        const prefix = prefixInput.value;
        const mainName = mainNameInput.value.trim();
        const taxId = taxIdInput.value.trim();

        if (taxId) {
            const company = companyDataStore.find(c => c.taxId === taxId);
            if (company) { populateAllFieldsFromCompany(row, company); } 
            else { prefixInput.value = ''; mainNameInput.value = ''; clearCompanyDetailsFields(row); }
            return; 
        }
        if (mainName) {
            const company = companyDataStore.find(c => c.mainName.toLowerCase() === mainName.toLowerCase() && (c.prefix === prefix || !prefix) );
            if (company) { populateAllFieldsFromCompany(row, company); } 
            else { taxIdInput.value = ''; clearCompanyDetailsFields(row); }
            return; 
        }
        if (!taxId && !mainName && !prefix) { clearAllCompanyDerivedFields(row); } 
        else if (!taxId && !mainName && prefix) { mainNameInput.value = ''; taxIdInput.value = ''; clearCompanyDetailsFields(row); }
    }

    function updateTax(row) {
        // ... (เหมือนเดิม) ...
        const valueInput = row.querySelector('.value-input');
        const taxRateSelect = row.querySelector('.tax-rate-select');
        const vatAmountDisplay = row.querySelector('.vat-amount-display');
        const value = parseFloat(valueInput.value) || 0;
        const taxRate = parseFloat(taxRateSelect.value) || 0;
        const vatAmount = (value * taxRate) / 100;
        vatAmountDisplay.textContent = vatAmount.toFixed(2);
    }

    function addNewRow() {
        const tableBody = document.getElementById('dataTable').querySelector('tbody');
        const firstRow = tableBody.querySelector('tr'); 
        let newRow;
        const newRowNumber = tableBody.rows.length + 1;

        if (!firstRow && tableBody.rows.length === 0) {
            const tempRowHTML = `
                <tr>
                    <td class="row-number">${newRowNumber}</td>
                    <td><select class="prefix-select"><option value="">-- คำนำหน้า --</option><option value="บริษัท">บริษัท</option><option value="หจก.">หจก.</option></select></td>
                    <td><input type="text" class="main-name-input" list="main-name-suggestions" placeholder="พิมพ์/เลือกชื่อกิจการหลัก"></td>
                    <td><input type="text" class="tax-id-input" placeholder="กรอกเลขผู้เสียภาษี"></td>
                    <td class="establishment-name-display"></td><td class="address-number-moo-display"></td>
                    <td class="soi-display"></td><td class="road-display"></td><td class="subdistrict-display"></td>
                    <td class="district-display"></td><td class="province-display"></td><td class="postal-code-display"></td>
                    <td><input type="date" class="date-input"></td>
                    <td><input type="text" class="income-type-input" placeholder="เช่น ค่าบริการ"></td>
                    <td><select class="tax-rate-select"><option value="0">0</option><option value="1">1</option><option value="3" selected>3</option><option value="5">5</option><option value="7">7</option><option value="10">10</option></select></td>
                    <td><input type="number" class="value-input" placeholder="0.00" step="0.01"></td>
                    <td class="vat-amount-display">0.00</td>
                    <td><input type="text" class="withholding-condition-input" value="1"></td>
                    <td><input type="text" class="notes-input"></td>
                    <td><button type="button" class="delete-row-btn">ลบ</button></td> {/* เพิ่มปุ่มลบ */}
                </tr>`;
            tableBody.insertAdjacentHTML('beforeend', tempRowHTML);
            newRow = tableBody.lastElementChild;
        } else {
            newRow = firstRow.cloneNode(true);
            const newPrefixSelect = newRow.querySelector('.prefix-select');
            if (newPrefixSelect) { // ตรวจสอบว่ามี element นี้จริงก่อน set innerHTML
                newPrefixSelect.innerHTML = `<option value="">-- คำนำหน้า --</option><option value="บริษัท">บริษัท</option><option value="หจก.">หจก.</option>`;
            }
            newRow.querySelector('.row-number').textContent = newRowNumber;
            tableBody.appendChild(newRow);
        }
        
        newRow.querySelector('.prefix-select').value = '';
        newRow.querySelector('.main-name-input').value = '';
        newRow.querySelector('.tax-id-input').value = ''; 
        clearCompanyDetailsFields(newRow); 
        
        newRow.querySelectorAll('input[type="text"].income-type-input, input[type="number"].value-input, input[type="text"].notes-input').forEach(input => input.value = '');
        const dateInput = newRow.querySelector('.date-input');
        if(dateInput) dateInput.value = getCurrentDateString(); 
        
        const taxRateSelect = newRow.querySelector('.tax-rate-select');
        if(taxRateSelect) taxRateSelect.value = '3'; 
        
        const withholdingInput = newRow.querySelector('.withholding-condition-input');
        if(withholdingInput) withholdingInput.value = '1';
        
        const vatDisplay = newRow.querySelector('.vat-amount-display');
        if(vatDisplay) vatDisplay.textContent = '0.00';
        // updateRowNumbers(); // ไม่จำเป็นต้องเรียกที่นี่ เพราะ addNewRow ตั้งลำดับที่ถูกต้องแล้ว
    }

    function escapeCsvCell(cellData) {
        // ... (เหมือนเดิม) ...
        if (cellData === null || cellData === undefined) { return ''; }
        cellData = String(cellData); cellData = cellData.replace(/"/g, '""'); 
        if (cellData.search(/("|,|\n)/g) >= 0) { cellData = `"${cellData}"`; }
        return cellData;
    }

    function exportTableToCSV(filename) {
        let csvContent = "\uFEFF"; 
        const table = document.getElementById('dataTable');
        
        // ส่วนหัวตาราง (ไม่รวมคอลัมน์ "ลบ")
        const headerRow = table.querySelector('thead tr');
        if (headerRow) {
            const headerData = [];
            const headerCols = headerRow.querySelectorAll('th');
            for (let i = 0; i < headerCols.length - 1; i++) { // วนลูปไม่ถึงคอลัมน์สุดท้าย (คอลัมน์ "ลบ")
                headerData.push(escapeCsvCell(headerCols[i].textContent.trim()));
            }
            if (headerData.length > 0) {
                 csvContent += headerData.join(',') + '\r\n';
            }
        }

        // ส่วนข้อมูล (ไม่รวมคอลัมน์ปุ่ม "ลบ")
        const dataRows = table.querySelectorAll('tbody tr');
        dataRows.forEach(row => {
            const rowData = [];
            const dataCols = row.querySelectorAll('td');
            for (let i = 0; i < dataCols.length - 1; i++) { // วนลูปไม่ถึงเซลล์สุดท้าย (เซลล์ปุ่ม "ลบ")
                const col = dataCols[i];
                let cellText = '';
                // ตรรกะการดึงข้อมูลจากเซลล์ (เหมือนเดิม แต่ปรับให้แม่นยำขึ้น)
                const prefixSelect = col.querySelector('select.prefix-select');
                const mainNameInput = col.querySelector('input.main-name-input');
                const taxIdInput = col.querySelector('input.tax-id-input');
                const regularInputField = col.querySelector('input[type="text"]:not(.main-name-input):not(.tax-id-input), input[type="number"], input[type="date"]');
                const taxRateSelect = col.querySelector('select.tax-rate-select');

                if (prefixSelect) { cellText = prefixSelect.value; } 
                else if (mainNameInput) { cellText = mainNameInput.value; } 
                else if (taxIdInput) { cellText = taxIdInput.value; } 
                else if (taxRateSelect) { cellText = taxRateSelect.value; } 
                else if (regularInputField) { cellText = regularInputField.value; } 
                else { cellText = col.textContent.trim(); }
                rowData.push(escapeCsvCell(cellText));
            }
            if (rowData.length > 0) {
                csvContent += rowData.join(',') + '\r\n';
            }
        });

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        if (link.download !== undefined) {
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url); link.setAttribute('download', filename);
            link.style.visibility = 'hidden'; document.body.appendChild(link);
            link.click(); document.body.removeChild(link); URL.revokeObjectURL(url);
        }
    }
</script>

</body>
</html>
