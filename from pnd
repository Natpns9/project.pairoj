<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ตารางข้อมูล (ค้นหาชื่อกิจการได้)</title>
    <style>
        body { font-family: sans-serif; }
        table { border-collapse: collapse; width: 100%; font-size: 0.8em; }
        th, td { border: 1px solid #dddddd; text-align: left; padding: 4px; }
        th { background-color: #f2f2f2; white-space: nowrap; }
        tr:nth-child(even) { background-color: #f9f9f9; }
        select, input[type="text"], input[type="number"], input[type="date"] { width: 98%; padding: 4px; box-sizing: border-box; font-size: 1em; }
        .vat-amount-display { font-weight: bold; }
        button { padding: 8px 15px; margin: 10px 5px 10px 0; cursor: pointer; color: white; border: none; border-radius: 4px; }
        button#addRowBtn { background-color: #4CAF50; }
        button#addRowBtn:hover { background-color: #45a049; }
        button#exportCsvBtn { background-color: #007bff; }
        button#exportCsvBtn:hover { background-color: #0056b3; }
    </style>
</head>
<body>

<h2>ตารางบันทึกข้อมูล (ค้นหาชื่อกิจการได้)</h2>

<button id="addRowBtn">เพิ่มแถวใหม่</button>
<button id="exportCsvBtn">ส่งออกเป็น CSV (Excel)</button>

<table id="dataTable">
    <thead>
        <tr>
            <th>ลำดับที่</th>
            <th>คำนำหน้า</th>
            <th>ชื่อกิจการ (หลัก)</th>
            <th>รหัสผู้เสียภาษีอากร</th>
            <th>ชื่อสถานประกอบการ/อาคาร</th>
            <th>เลขที่/หมู่ที่</th>
            <th>ตรอก/ซอย</th>
            <th>ถนน</th>
            <th>ตำบล/แขวง</th>
            <th>อำเภอ/เขต</th>
            <th>จังหวัด</th>
            <th>รหัสไปรษณีย์</th>
            <th>วัน/เดือน/ปี</th>
            <th>ประเภทเงินได้</th>
            <th>อัตราภาษี (%)</th>
            <th>มูลค่าสินค้า/บริการ</th>
            <th>ภาษีมูลค่าเพิ่ม</th>
            <th>เงื่อนไขการหักภาษี</th>
            <th>หมายเหตุ</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td class="row-number">1</td>
            <td>
                <select class="prefix-select">
                    <option value="">-- คำนำหน้า --</option>
                    <option value="บริษัท">บริษัท</option>
                    <option value="หจก.">หจก.</option>
                    <option value="หสน.">หสน.</option>
                    <option value="ร้าน">ร้าน</option>
                    <option value="นาย">นาย</option>
                    <option value="นาง">นาง</option>
                    <option value="น.ส.">น.ส.</option>
                    <option value="อื่นๆ">อื่นๆ</option>
                </select>
            </td>
            <td><input type="text" class="main-name-input" list="main-name-suggestions" placeholder="พิมพ์/เลือกชื่อกิจการหลัก"></td> {/* เพิ่ม list attribute */}
            <td class="tax-id-display"></td>
            <td class="establishment-name-display"></td>
            <td class="address-number-moo-display"></td>
            <td class="soi-display"></td>
            <td class="road-display"></td>
            <td class="subdistrict-display"></td>
            <td class="district-display"></td>
            <td class="province-display"></td>
            <td class="postal-code-display"></td>
            <td><input type="date" class="date-input"></td>
            <td><input type="text" class="income-type-input" placeholder="เช่น ค่าบริการ"></td>
            <td>
                <select class="tax-rate-select">
                    <option value="0">0</option><option value="1">1</option><option value="3" selected>3</option><option value="5">5</option><option value="7">7</option><option value="10">10</option>
                </select>
            </td>
            <td><input type="number" class="value-input" placeholder="0.00" step="0.01"></td>
            <td class="vat-amount-display">0.00</td>
            <td><input type="text" class="withholding-condition-input" value="1"></td>
            <td><input type="text" class="notes-input"></td>
        </tr>
        </tbody>
</table>

<datalist id="main-name-suggestions">
    </datalist>

<script>
    const companyDataStore = [
        { prefix: "บริษัท", mainName: "รักษาความปลอดภัย สยามการ์ด แอนด์ คลีนนิ่ง จำกัด", taxId: "0603562007770", establishmentName: "-", number: "2", soi: "ฉลองกรุง 14", road: "ฉลองกรุง", moo: "", subdistrict: "ลำปลาทิว", district: "ลาดกระบัง", province: "กรุงเทพฯ", postalCode: "10520" },
        { prefix: "หจก.", mainName: "พรอสเพอร์ เอ็นจิเนียริ่ง (สาขาบางนา)", taxId: "0105532012207", establishmentName: "อาคารบางนาทาวเวอร์ ตึกบี ชั้น 15", number: "999/64", soi: "", road: "บางนา-ตราด", moo: "1", subdistrict: "บางแก้ว", district: "บางพลี", province: "สมุทรปราการ", postalCode: "10540" },
        { prefix: "บริษัท", mainName: "พรอสเพอร์ เอ็นจิเนียริ่ง จำกัด (มหาชน) - สาขาพัฒนาการ", taxId: "0105532012207", establishmentName: "สำนักงานพัฒนาการ", number: "17", soi: "พัฒนาการ 69", road: "พัฒนาการ", moo: "", subdistrict: "ประเวศ", district: "ประเวศ", province: "กรุงเทพฯ", postalCode: "10250" },
        { prefix: "ร้าน", mainName: "บี.กริม เพาเวอร์ เซอร์วิส", taxId: "0105547021126", establishmentName: "อาคาร ดร.เกฮาร์ด ลิงค์", number: "5", soi: "กรุงเทพกรีฑา 37 แยก 8", road: "กรุงเทพกรีฑา", moo: "", subdistrict: "หัวหมาก", district: "บางกะปิ", province: "กรุงเทพฯ", postalCode: "10240" },
        { prefix: "บริษัท", mainName: "ไทยยูเนี่ยน กรุ๊ป จำกัด (มหาชน)", taxId: "0107537000877", establishmentName: "อาคารเอสเอ็มทาวเวอร์", number: "979/12", soi: "", road: "พหลโยธิน", moo: "", subdistrict: "สามเสนใน", district: "พญาไท", province: "กรุงเทพฯ", postalCode: "10400" } // เพิ่มข้อมูลตัวอย่าง
    ];

    function getCurrentDateString() {
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    // *** ฟังก์ชันใหม่สำหรับเติม datalist ***
    function populateMainNameDatalist() {
        const datalist = document.getElementById('main-name-suggestions');
        if (!datalist) return;
        datalist.innerHTML = ''; // ล้าง option เก่า (ถ้ามี)

        const uniqueMainNames = new Set(); // ใช้ Set เพื่อเก็บชื่อที่ไม่ซ้ำกัน
        companyDataStore.forEach(company => {
            if (company.mainName && company.mainName.trim() !== '') {
                uniqueMainNames.add(company.mainName.trim());
            }
        });

        uniqueMainNames.forEach(name => {
            const option = document.createElement('option');
            option.value = name;
            datalist.appendChild(option);
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        initializeExistingRows();
        populateMainNameDatalist(); // *** เรียกฟังก์ชันเติม datalist ***

        const dataTable = document.getElementById('dataTable');
        dataTable.addEventListener('change', function(event) {
            const target = event.target;
            const currentRow = target.closest('tr');
            if (!currentRow) return;

            if (target.classList.contains('prefix-select') || target.classList.contains('main-name-input')) {
                lookupAndPopulateCompanyData(currentRow);
            } else if (target.classList.contains('value-input') || target.classList.contains('tax-rate-select')) {
                updateTax(currentRow);
            }
        });

        dataTable.addEventListener('input', function(event){ // ใช้ 'input' event สำหรับ main-name-input เพื่อให้ lookup ทันทีที่พิมพ์ได้ (ถ้าต้องการ)
            const target = event.target;
            const currentRow = target.closest('tr');
            if (!currentRow) return;

            if (target.classList.contains('value-input')) { 
                updateTax(currentRow); 
            } 
            // ถ้าต้องการให้ lookup ทันทีที่พิมพ์ใน main-name-input (อาจจะทำให้ lookup บ่อย)
            // else if (target.classList.contains('main-name-input')) {
            //     lookupAndPopulateCompanyData(currentRow);
            // }
        });

        document.getElementById('addRowBtn').addEventListener('click', addNewRow);
        document.getElementById('exportCsvBtn').addEventListener('click', function() {
            exportTableToCSV('ข้อมูลตาราง ' + getCurrentDateString() + '.csv');
        });
    });
    
    function initializeExistingRows() {
        const tableBody = document.getElementById('dataTable').querySelector('tbody');
        const currentDate = getCurrentDateString();
        tableBody.querySelectorAll('tr').forEach((row, index) => {
            row.querySelector('.row-number').textContent = index + 1;
            const withholdingInput = row.querySelector('.withholding-condition-input');
            if (withholdingInput && withholdingInput.value === "") { withholdingInput.value = '1'; }
            const dateInput = row.querySelector('.date-input');
            if (dateInput && !dateInput.value) { dateInput.value = currentDate; }
        });
    }

    function clearCompanySpecificFields(row) {
        row.querySelector('.tax-id-display').textContent = '';
        row.querySelector('.establishment-name-display').textContent = '';
        row.querySelector('.address-number-moo-display').textContent = '';
        row.querySelector('.soi-display').textContent = '';
        row.querySelector('.road-display').textContent = '';
        row.querySelector('.subdistrict-display').textContent = '';
        row.querySelector('.district-display').textContent = '';
        row.querySelector('.province-display').textContent = '';
        row.querySelector('.postal-code-display').textContent = '';
    }

    function lookupAndPopulateCompanyData(row) {
        const prefix = row.querySelector('.prefix-select').value;
        const mainName = row.querySelector('.main-name-input').value.trim();

        if (!mainName && !prefix) { // ถ้าทั้ง prefix และ mainName ว่างเปล่า
            clearCompanySpecificFields(row);
            return;
        }
        
        // ค้นหาโดยพิจารณาทั้ง prefix และ mainName (ถ้า prefix ถูกเลือก)
        // หรือค้นหาด้วย mainName อย่างเดียวถ้า prefix ไม่ได้ถูกเลือก (เพื่อให้ยืดหยุ่น)
        const company = companyDataStore.find(c => {
            const mainNameMatch = c.mainName.toLowerCase() === mainName.toLowerCase();
            if (prefix) { // ถ้ามีการเลือก prefix
                return c.prefix === prefix && mainNameMatch;
            }
            return mainNameMatch; // ถ้าไม่ได้เลือก prefix ให้เทียบ mainName อย่างเดียว
        });

        if (company) {
            // ถ้าพบ company และ prefix ที่ผู้ใช้เลือกตรงกับข้อมูล (หรือผู้ใช้ไม่ได้เลือก prefix แต่ mainName ตรง)
            if (!prefix || company.prefix === prefix) {
                 row.querySelector('.prefix-select').value = company.prefix; // อัปเดต prefix select ให้ตรงกับข้อมูลที่พบ
                 row.querySelector('.tax-id-display').textContent = company.taxId;
                 row.querySelector('.establishment-name-display').textContent = company.establishmentName;
                 let numberMooText = '';
                 if (company.number && company.number.trim() !== '') { numberMooText += company.number.trim(); }
                 if (company.moo && company.moo.trim() !== '') { numberMooText += (numberMooText ? ' ' : '') + 'หมู่ ' + company.moo.trim(); }
                 row.querySelector('.address-number-moo-display').textContent = numberMooText;
                 row.querySelector('.soi-display').textContent = company.soi;
                 row.querySelector('.road-display').textContent = company.road;
                 row.querySelector('.subdistrict-display').textContent = company.subdistrict;
                 row.querySelector('.district-display').textContent = company.district;
                 row.querySelector('.province-display').textContent = company.province;
                 row.querySelector('.postal-code-display').textContent = company.postalCode;
            } else {
                // mainName ตรง แต่ prefix ที่ผู้ใช้เลือกไม่ตรงกับข้อมูลที่พบ -> อาจจะล้าง field หรือปล่อยให้ผู้ใช้แก้ไข prefix
                 clearCompanySpecificFields(row);
            }
        } else {
            clearCompanySpecificFields(row);
        }
    }

    function updateTax(row) {
        const valueInput = row.querySelector('.value-input');
        const taxRateSelect = row.querySelector('.tax-rate-select');
        const vatAmountDisplay = row.querySelector('.vat-amount-display');
        const value = parseFloat(valueInput.value) || 0;
        const taxRate = parseFloat(taxRateSelect.value) || 0;
        const vatAmount = (value * taxRate) / 100;
        vatAmountDisplay.textContent = vatAmount.toFixed(2);
    }

    function addNewRow() {
        const tableBody = document.getElementById('dataTable').querySelector('tbody');
        const firstRow = tableBody.querySelector('tr'); 
        let newRow;
        const newRowNumber = tableBody.rows.length + 1;

        if (!firstRow) { // กรณี tbody ว่างเปล่าตอนแรก
            const tempRowHTML = `
                <tr>
                    <td class="row-number">${newRowNumber}</td>
                    <td><select class="prefix-select"><option value="">-- คำนำหน้า --</option><option value="บริษัท">บริษัท</option><option value="หจก.">หจก.</option><option value="หสน.">หสน.</option><option value="ร้าน">ร้าน</option><option value="นาย">นาย</option><option value="นาง">นาง</option><option value="น.ส.">น.ส.</option><option value="อื่นๆ">อื่นๆ</option></select></td>
                    <td><input type="text" class="main-name-input" list="main-name-suggestions" placeholder="พิมพ์/เลือกชื่อกิจการหลัก"></td>
                    <td class="tax-id-display"></td><td class="establishment-name-display"></td><td class="address-number-moo-display"></td>
                    <td class="soi-display"></td><td class="road-display"></td><td class="subdistrict-display"></td>
                    <td class="district-display"></td><td class="province-display"></td><td class="postal-code-display"></td>
                    <td><input type="date" class="date-input"></td>
                    <td><input type="text" class="income-type-input" placeholder="เช่น ค่าบริการ"></td>
                    <td><select class="tax-rate-select"><option value="0">0</option><option value="1">1</option><option value="3" selected>3</option><option value="5">5</option><option value="7">7</option><option value="10">10</option></select></td>
                    <td><input type="number" class="value-input" placeholder="0.00" step="0.01"></td>
                    <td class="vat-amount-display">0.00</td>
                    <td><input type="text" class="withholding-condition-input" value="1"></td>
                    <td><input type="text" class="notes-input"></td>
                </tr>`;
            tableBody.insertAdjacentHTML('beforeend', tempRowHTML);
            newRow = tableBody.lastElementChild;
        } else {
            newRow = firstRow.cloneNode(true);
            newRow.querySelector('.row-number').textContent = newRowNumber;
            tableBody.appendChild(newRow);
        }
        
        // รีเซ็ตค่าในแถวใหม่
        newRow.querySelector('.prefix-select').value = '';
        newRow.querySelector('.main-name-input').value = '';
        clearCompanySpecificFields(newRow); 
        
        newRow.querySelectorAll('input[type="text"].income-type-input, input[type="number"].value-input, input[type="text"].notes-input').forEach(input => input.value = '');
        newRow.querySelector('.date-input').value = getCurrentDateString(); 
        newRow.querySelector('.tax-rate-select').value = '3'; 
        newRow.querySelector('.withholding-condition-input').value = '1';
        newRow.querySelector('.vat-amount-display').textContent = '0.00'; // Clear VAT display too
    }

    function escapeCsvCell(cellData) {
        if (cellData === null || cellData === undefined) { return ''; }
        cellData = String(cellData); cellData = cellData.replace(/"/g, '""'); 
        if (cellData.search(/("|,|\n)/g) >= 0) { cellData = `"${cellData}"`; }
        return cellData;
    }

    function exportTableToCSV(filename) {
        let csvContent = "\uFEFF"; 
        const table = document.getElementById('dataTable');
        const rows = table.querySelectorAll('tr');
        rows.forEach(row => {
            const rowData = [];
            const cols = row.querySelectorAll('th, td');
            cols.forEach(col => {
                let cellText = '';
                if (row.parentNode.nodeName === 'TBODY') { 
                    const prefixSelect = col.querySelector('select.prefix-select');
                    const mainNameInput = col.querySelector('input.main-name-input');
                    const inputField = col.querySelector('input[type="text"]:not(.main-name-input), input[type="number"], input[type="date"]');
                    const taxRateSelect = col.querySelector('select.tax-rate-select');

                    if (prefixSelect) { cellText = prefixSelect.value; } 
                    else if (mainNameInput) { cellText = mainNameInput.value; } 
                    else if (taxRateSelect) { cellText = taxRateSelect.value; } 
                    else if (inputField) { cellText = inputField.value; } 
                    else { cellText = col.textContent.trim(); }
                } else { cellText = col.textContent.trim(); }
                rowData.push(escapeCsvCell(cellText));
            });
            csvContent += rowData.join(',') + '\r\n';
        });
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        if (link.download !== undefined) {
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url); link.setAttribute('download', filename);
            link.style.visibility = 'hidden'; document.body.appendChild(link);
            link.click(); document.body.removeChild(link); URL.revokeObjectURL(url);
        }
    }
</script>

</body>
</html>
