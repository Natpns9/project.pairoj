<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ตารางข้อมูลพร้อมระบบอัตโนมัติ (ปรับปรุง)</title>
    <style>
        body {
            font-family: sans-serif;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            font-size: 0.85em; /* ปรับขนาดฟอนต์อีกเล็กน้อย */
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 5px; /* ลด padding */
        }
        th {
            background-color: #f2f2f2;
            white-space: nowrap; /* ป้องกันการตัดคำในหัวตาราง */
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        select, input[type="text"], input[type="number"], input[type="date"] {
            width: 98%; /* ทำให้ input เต็มความกว้างเซลล์ */
            padding: 4px;
            box-sizing: border-box;
            font-size: 1em;
        }
        .vat-amount-display {
            font-weight: bold;
        }
        button {
            padding: 8px 15px;
            margin: 10px 0;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
        }
        button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>

<h2>ตารางบันทึกข้อมูล (ปรับปรุงล่าสุด)</h2>

<button id="addRowBtn">เพิ่มแถวใหม่</button>
<button id="addRowBtn">เพิ่มแถวใหม่</button>
<button id="exportCsvBtn">ส่งออกเป็น CSV (Excel)</button>

<table id="dataTable">
    <thead>
        <tr>
            <th>ลำดับที่</th>
            <th>ชื่อผู้เสียภาษีอากร/ผู้ประกอบการ</th>
            <th>รหัสผู้เสียภาษีอากร</th>
            <th>ชื่อสถานประกอบการ/อาคาร</th>
            <th>เลขที่/หมู่ที่</th>
            <th>ตรอก/ซอย</th>
            <th>ถนน</th>
            <th>ตำบล/แขวง</th>
            <th>อำเภอ/เขต</th>
            <th>จังหวัด</th>
            <th>รหัสไปรษณีย์</th>
            <th>วัน/เดือน/ปี</th>
            <th>ประเภทเงินได้</th>
            <th>อัตราภาษี (%)</th>
            <th>มูลค่าสินค้า/บริการ</th>
            <th>ภาษีมูลค่าเพิ่ม</th>
            <th>เงื่อนไขการหักภาษี</th>
            <th>หมายเหตุ</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td class="row-number">1</td>
            <td>
                <select class="company-select">
                    <option value="">-- เลือกบริษัท --</option>
                    </select>
            </td>
            <td class="tax-id-display"></td>
            <td class="establishment-name-display"></td>
            <td class="address-number-moo-display"></td> {/* รวมเลขที่และหมู่ที่ */}
            <td class="soi-display"></td>
            <td class="road-display"></td>
            <td class="subdistrict-display"></td>
            <td class="district-display"></td>
            <td class="province-display"></td>
            <td class="postal-code-display"></td>
            <td><input type="date" class="date-input"></td>
            <td><input type="text" class="income-type-input" placeholder="เช่น ค่าบริการ"></td>
            <td>
                <select class="tax-rate-select">
                    <option value="0">0</option>
                    <option value="1">1</option>
                    <option value="3" selected>3</option>
                    <option value="5">5</option>
                    <option value="7">7</option>
                    <option value="10">10</option>
                </select>
            </td>
            <td><input type="number" class="value-input" placeholder="0.00" step="0.01"></td>
            <td class="vat-amount-display">0.00</td>
            <td><input type="text" class="withholding-condition-input" value="1"></td> {/* ค่าเริ่มต้นเป็น 1 */}
            <td><input type="text" class="notes-input"></td>
        </tr>
        </tbody>
</table>

<script>
    const companyDataStore = [
        {
            id: "companyA",
            name: "บริษัท รักษาความปลอดภัย สยามการ์ด แอนด์ คลีนนิ่ง จำกัด",
            taxId: "0603562007770",
            establishmentName: "-",
            number: "2",
            soi: "ฉลองกรุง 14",
            road: "ฉลองกรุง",
            moo: "", // หมู่ที่ (อาจมีหรือไม่มี)
            subdistrict: "ลำปลาทิว",
            district: "ลาดกระบัง",
            province: "กรุงเทพฯ",
            postalCode: "10520"
        },
        {
            id: "companyB",
            name: "บริษัท พรอสเพอร์ เอ็นจิเนียริ่ง จำกัด (มหาชน) - สาขาบางนา",
            taxId: "0105532012207",
            establishmentName: "อาคารบางนาทาวเวอร์ ตึกบี ชั้น 15",
            number: "999/64",
            soi: "",
            road: "บางนา-ตราด",
            moo: "1", // มีหมู่ที่
            subdistrict: "บางแก้ว",
            district: "บางพลี",
            province: "สมุทรปราการ",
            postalCode: "10540"
        },
        {
            id: "companyC",
            name: "บริษัท พรอสเพอร์ เอ็นจิเนียริ่ง จำกัด (มหาชน) - สาขาพัฒนาการ",
            taxId: "0105532012207",
            establishmentName: "สำนักงานพัฒนาการ",
            number: "17",
            soi: "พัฒนาการ 69",
            road: "พัฒนาการ",
            moo: "",
            subdistrict: "ประเวศ",
            district: "ประเวศ",
            province: "กรุงเทพฯ",
            postalCode: "10250"
        },
        {
            id: "companyD",
            name: "บริษัท บี.กริม เพาเวอร์ จำกัด (มหาชน)",
            taxId: "0105547021126",
            establishmentName: "อาคาร ดร.เกฮาร์ด ลิงค์",
            number: "5",
            soi: "กรุงเทพกรีฑา 37 แยก 8",
            road: "กรุงเทพกรีฑา",
            moo: "",
            subdistrict: "หัวหมาก",
            district: "บางกะปิ",
            province: "กรุงเทพฯ",
            postalCode: "10240"
        }
    ];

    document.addEventListener('DOMContentLoaded', function () {
        populateCompanySelects();
        initializeExistingRows();

        const dataTable = document.getElementById('dataTable');
        dataTable.addEventListener('change', handleTableChange);
        dataTable.addEventListener('input', handleTableInput);

        document.getElementById('addRowBtn').addEventListener('click', addNewRow);
    });

    function populateCompanySelects() {
        const companySelects = document.querySelectorAll('.company-select');
        companySelects.forEach(select => {
            // Clear existing options except the first one (-- เลือกบริษัท --)
            while (select.options.length > 1) {
                select.remove(1);
            }
            companyDataStore.forEach(company => {
                const option = document.createElement('option');
                option.value = company.id;
                option.textContent = company.name;
                select.appendChild(option);
            });
        });
    }
    
    function initializeExistingRows() {
        const tableBody = document.getElementById('dataTable').querySelector('tbody');
        tableBody.querySelectorAll('tr').forEach((row, index) => {
            row.querySelector('.row-number').textContent = index + 1; // Set initial row numbers
            const withholdingInput = row.querySelector('.withholding-condition-input');
            if (withholdingInput && !withholdingInput.value) { // Set default if empty, though HTML has value="1"
                withholdingInput.value = '1';
            }
        });
    }

    function handleTableChange(event) {
        const target = event.target;
        const currentRow = target.closest('tr');
        if (!currentRow) return;

        if (target.classList.contains('company-select')) {
            populateCompanyData(currentRow, target.value);
        }

        if (target.classList.contains('value-input') || target.classList.contains('tax-rate-select')) {
            updateTax(currentRow);
        }
    }

    function handleTableInput(event) {
        const target = event.target;
        const currentRow = target.closest('tr');
        if (!currentRow) return;

        if (target.classList.contains('value-input')) {
             updateTax(currentRow);
        }
    }
    
    function populateCompanyData(row, selectedCompanyId) {
        const company = companyDataStore.find(c => c.id === selectedCompanyId);
        
        row.querySelector('.tax-id-display').textContent = company ? company.taxId : '';
        row.querySelector('.establishment-name-display').textContent = company ? company.establishmentName : '';
        
        let numberMooText = '';
        if (company) {
            if (company.number && company.number.trim() !== '') {
                numberMooText += company.number.trim();
            }
            if (company.moo && company.moo.trim() !== '') {
                numberMooText += (numberMooText ? ' ' : '') + 'หมู่ ' + company.moo.trim();
            }
        }
        row.querySelector('.address-number-moo-display').textContent = numberMooText;
        
        row.querySelector('.soi-display').textContent = company ? company.soi : '';
        row.querySelector('.road-display').textContent = company ? company.road : '';
        row.querySelector('.subdistrict-display').textContent = company ? company.subdistrict : '';
        row.querySelector('.district-display').textContent = company ? company.district : '';
        row.querySelector('.province-display').textContent = company ? company.province : '';
        row.querySelector('.postal-code-display').textContent = company ? company.postalCode : '';
    }

    function updateTax(row) {
        const valueInput = row.querySelector('.value-input');
        const taxRateSelect = row.querySelector('.tax-rate-select');
        const vatAmountDisplay = row.querySelector('.vat-amount-display');

        const value = parseFloat(valueInput.value) || 0;
        const taxRate = parseFloat(taxRateSelect.value) || 0;

        const vatAmount = (value * taxRate) / 100;
        vatAmountDisplay.textContent = vatAmount.toFixed(2);
    }

    function addNewRow() {
        const tableBody = document.getElementById('dataTable').querySelector('tbody');
        const firstRow = tableBody.querySelector('tr'); // Use first row as template
        if (!firstRow) { // Should not happen if there's always one row
            console.error("No template row found to clone.");
            return;
        }
        const newRow = firstRow.cloneNode(true); // โคลนแถวแรก (หรือแถว template)

        // 1. อัปเดตลำดับที่
        newRow.querySelector('.row-number').textContent = tableBody.rows.length + 1;

        // 2. ล้าง/ตั้งค่าเริ่มต้นข้อมูลในแถวใหม่
        newRow.querySelector('.company-select').value = ''; // ให้เลือกบริษัทใหม่
        newRow.querySelector('.tax-id-display').textContent = '';
        newRow.querySelector('.establishment-name-display').textContent = '';
        newRow.querySelector('.address-number-moo-display').textContent = '';
        newRow.querySelector('.soi-display').textContent = '';
        newRow.querySelector('.road-display').textContent = '';
        newRow.querySelector('.subdistrict-display').textContent = '';
        newRow.querySelector('.district-display').textContent = '';
        newRow.querySelector('.province-display').textContent = '';
        newRow.querySelector('.postal-code-display').textContent = '';
        
        newRow.querySelector('.date-input').value = '';
        newRow.querySelector('.income-type-input').value = '';
        newRow.querySelector('.tax-rate-select').value = '3'; // ค่าเริ่มต้นอัตราภาษี
        newRow.querySelector('.value-input').value = '';
        newRow.querySelector('.vat-amount-display').textContent = '0.00';
        newRow.querySelector('.withholding-condition-input').value = '1'; // ค่าเริ่มต้น
        newRow.querySelector('.notes-input').value = '';

        // ... (โค้ด JavaScript เดิม) ...

document.addEventListener('DOMContentLoaded', function () {
    // ... (โค้ด DOMContentLoaded เดิม) ...
    document.getElementById('exportCsvBtn').addEventListener('click', function() {
        exportTableToCSV('ข้อมูลตาราง.csv');
    });
});

function escapeCsvCell(cellData) {
    if (cellData === null || cellData === undefined) {
        return '';
    }
    cellData = String(cellData);
    // Escape double quotes by doubling them
    cellData = cellData.replace(/"/g, '""');
    // If the cell contains a comma, newline, or double quote, wrap it in double quotes
    if (cellData.search(/("|,|\n)/g) >= 0) {
        cellData = `"${cellData}"`;
    }
    return cellData;
}

function exportTableToCSV(filename) {
    let csvContent = "\uFEFF"; // BOM for UTF-8 to help Excel with Thai characters
    const table = document.getElementById('dataTable');
    const rows = table.querySelectorAll('tr');

    rows.forEach(row => {
        const rowData = [];
        const cols = row.querySelectorAll('th, td');

        cols.forEach(col => {
            let cellText = '';
            if (row.parentNode.nodeName === 'TBODY') { // Data row
                const companySelect = col.querySelector('select.company-select');
                const inputField = col.querySelector('input[type="text"], input[type="number"], input[type="date"]');
                const taxRateSelect = col.querySelector('select.tax-rate-select');
                const withholdingInput = col.querySelector('input.withholding-condition-input'); // specific class

                if (companySelect) {
                    cellText = companySelect.selectedIndex > 0 ? companySelect.selectedOptions[0].text : '';
                } else if (inputField) {
                    cellText = inputField.value;
                } else if (taxRateSelect) {
                    cellText = taxRateSelect.value; // Exports the value, e.g., "3" for 3%
                } else if(withholdingInput){
                    cellText = withholdingInput.value;
                }
                 else { // For td elements that display data directly (like .tax-id-display, .vat-amount-display, .row-number)
                    cellText = col.textContent.trim();
                }
            } else { // Header row
                cellText = col.textContent.trim();
            }
            rowData.push(escapeCsvCell(cellText));
        });
        csvContent += rowData.join(',') + '\r\n';
    });

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) { // Feature detection
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }
}
        tableBody.appendChild(newRow);
        // Event listeners ที่ผูกกับ table (event delegation) จะทำงานกับแถวใหม่โดยอัตโนมัติ
    }
</script>

</body>
</html>
